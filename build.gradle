buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
		maven {
			url 'http://192.168.0.9:8081/nexus/content/groups/public/'
		  }
		jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'eu.appsatori.fatjar'
apply from:   'dependencies.gradle'

apply plugin: "jacoco"
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
//apply plugin: 'pmd'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileGroovy {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

// source encoding
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = 'UTF-8'


// source sets
sourceSets {
	//main { compileClasspath += configurations.providedCompile }
	test.groovy.srcDirs = ['src/test/java']
}

repositories {
    mavenCentral()
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

javadoc {
    options.encoding = "UTF-8"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

version = '1.0.1'

configurations{
	provided
}

task fatJar(type: Jar) {
	
	manifest {
		attributes 'Implementation-Title': 'manasobi-utils',
			'Implementation-Version': version
			//'Main-Class': 'com.mkyong.DateUtils'
	}
	
	dependsOn configurations.runtime
	
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "antlr/**/"
        exclude "ch/**/"
        exclude "eu/**/"
        exclude "groovy/**/"
        exclude "groovyjarjarantlr/**/"
        exclude "groovyjarjarasm/**/"
        exclude "groovyjarjarcommonscli/**/"
        exclude "org/aopalliance/**/"
        exclude "org/codehaus/**/"
        exclude "org/example/**/"
        exclude "org/slf4j/**/"
        exclude "org/springframework/**/"
        exclude "org/yaml/**/"
        exclude "META-INF/**"
        exclude "favicon.ico"
        exclude "overview.html"
    }    
    with jar
}

task sourcesJar(type: Jar, dependsOn: fatJar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


test {
    jacoco{
        excludes = ['io/recruit/commons/config/**']
        //includes = ['com/bla/**']
        append = false
    }
}

findbugs {
	ignoreFailures = true
}

checkstyle {

	println rootDir
	configFile = new File(rootDir, "config/manasobi-checkstyle.xml")
	ignoreFailures = true
}



/*

pmd {
	ruleSets = ["basic", "braces", "design"]
	ignoreFailures = true
}

jacoco {
	toolVersion = "0.6.2.201302030002"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpFile = file("$buildDir/jacoco/classpathdumps")
	}
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	reports {
		xml{
			enabled true
			destination "${buildDir}/reports/jacoco/jacoco.xml"
		}
		csv.enabled false
		html{
			enabled true
			destination "${buildDir}/jacocoHtml"
		}
	}
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}
   
tasks.withType(Compile) {
	options.debug = true
	options.compilerArgs = ["-g"]
}
   
*/











